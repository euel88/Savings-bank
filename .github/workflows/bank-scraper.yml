name: 저축은행 데이터 스크래핑

# 실행 조건 설정
on:
  workflow_dispatch: # 수동 실행 가능
  schedule:
    # 5월, 8월, 11월의 20-31일 사이, KST 기준 오전 9시부터 오후 6시까지 매시간
    - cron: '0 0 20-31 5,8,11 *'  # 00:00 UTC (09:00 KST)
    - cron: '0 1 20-31 5,8,11 *'  # 01:00 UTC (10:00 KST)
    - cron: '0 2 20-31 5,8,11 *'  # 02:00 UTC (11:00 KST)
    - cron: '0 3 20-31 5,8,11 *'  # 03:00 UTC (12:00 KST)
    - cron: '0 4 20-31 5,8,11 *'  # 04:00 UTC (13:00 KST)
    - cron: '0 5 20-31 5,8,11 *'  # 05:00 UTC (14:00 KST)
    - cron: '0 6 20-31 5,8,11 *'  # 06:00 UTC (15:00 KST)
    - cron: '0 7 20-31 5,8,11 *'  # 07:00 UTC (16:00 KST)
    - cron: '0 8 20-31 5,8,11 *'  # 08:00 UTC (17:00 KST)
    - cron: '0 9 20-31 5,8,11 *'  # 09:00 UTC (18:00 KST)

permissions: # 릴리즈 생성 권한 추가
  contents: write

env:
  TZ: 'Asia/Seoul' # 한국 시간대 설정
  PYTHON_VERSION: '3.9'

jobs:
  check-and-scrape:
    runs-on: ubuntu-latest

    steps:
    # 1. 코드 체크아웃
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    # 2. Python 환경 설정
    - name: Python ${{ env.PYTHON_VERSION }} 설정
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # 3. 마지막 평일 및 실행 시간 확인
    - name: 마지막 평일 및 실행 시간 확인
      id: check-date
      run: |
        python_code=$(cat <<EOF
        import datetime
        import calendar
        import sys
        import os

        now_kst = datetime.datetime.now()
        year = now_kst.year
        month = now_kst.month
        day = now_kst.day
        hour_kst = now_kst.hour

        should_run_final = "false"

        if month not in [5, 8, 11]:
            print(f"대상 월({month}월)이 아닙니다.")
        else:
            last_day_of_month_num = calendar.monthrange(year, month)[1]
            actual_last_weekday_day_num = -1
            for d_loop_num in range(last_day_of_month_num, 0, -1):
                date_to_check_loop = datetime.date(year, month, d_loop_num)
                if date_to_check_loop.weekday() < 5:
                    actual_last_weekday_day_num = d_loop_num
                    break
            
            if day != actual_last_weekday_day_num:
                print(f"오늘({year}-{month}-{day})은 마지막 평일(해당 월 {actual_last_weekday_day_num}일)이 아닙니다.")
            else:
                if not (9 <= hour_kst <= 18): # KST 9시 ~ 18시
                    print(f"현재 시간({hour_kst}시 KST)이 대상 실행 시간대(09시-18시)가 아닙니다.")
                else:
                    print(f"실행 조건 충족: 마지막 평일({year}-{month}-{day})이며, 실행 시간대({hour_kst}시 KST)입니다.")
                    should_run_final = "true"
        
        github_output_file = os.getenv('GITHUB_OUTPUT')
        if github_output_file:
            with open(github_output_file, 'a') as f:
                f.write(f"should_run={should_run_final}\n")
            print(f"Set GITHUB_OUTPUT: should_run={should_run_final}")
        else:
            print(f"Warning: GITHUB_OUTPUT not set. Would have set: should_run={should_run_final}")
        EOF
        )
        python -c "$python_code"

    # 4. Google Chrome 설치
    - name: Google Chrome 설치
      if: steps.check-date.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        google-chrome --version

    # 5. 의존성 설치
    - name: 의존성 설치
      if: steps.check-date.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir --force-reinstall -r requirements.txt

    # 6. 스크래핑 실행
    - name: 스크래핑 실행
      if: steps.check-date.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
      run: python bank_scraper_headless.py # 스크립트 파일명 확인
      env:
        MAX_WORKERS: 2 # GitHub Actions 환경에 맞게 조정
        MAX_RETRIES: 3
        PAGE_LOAD_TIMEOUT: 45
        GMAIL_ADDRESS: ${{ secrets.GMAIL_ADDRESS }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        RECIPIENT_EMAILS: ${{ secrets.RECIPIENT_EMAILS }}

    # 7. 결과 파일 업로드
    - name: 결과 파일 업로드
      if: (steps.check-date.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch') && (success() || failure())
      uses: actions/upload-artifact@v4
      with:
        name: 저축은행-데이터-${{ env.TZ_DATE_ARTIFACT }}-${{ github.run_number }}
        path: |
          output/  # 스크립트에서 output 폴더에 모든 결과물(로그, 엑셀) 저장
          *.zip    # 루트에 생성된 zip 파일
        retention-days: 90
      env:
        TZ_DATE_ARTIFACT: $(date +%Y%m%d-%H%M)

    # 8. 릴리즈 생성
    - name: 릴리즈 생성
      if: (steps.check-date.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch') && success()
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG_NAME: data-v$(date +%Y%m%d-%H%M)-${{ github.run_number }}
        RELEASE_NAME: "저축은행 데이터 $(date +%Y%m%d-%H%M) (Build ${{ github.run_number }})"
        RELEASE_BODY_CREATED_AT: $(date '+%Y-%m-%d %H:%M:%S %Z')
      with:
        tag_name: ${{ env.RELEASE_TAG_NAME }}
        name: ${{ env.RELEASE_NAME }}
        body: |
          자동 생성된 저축은행 데이터입니다.
          생성 시간 (KST): ${{ env.RELEASE_BODY_CREATED_AT }}
        files: |
          *.zip

    # 9. 실패 알림
    - name: 실패 알림
      if: failure() && (steps.check-date.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
      run: |
        echo "스크래핑 실패! 워크플로우 로그 및 업로드된 로그 파일을 확인하세요."
