name: 저축은행 데이터 스크래핑

# 실행 조건 설정
on:
  workflow_dispatch: # 수동 실행 가능
  schedule:
    # 5월, 8월, 11월의 20-31일 사이, KST 기준 오전 9시부터 오후 6시까지 매시간
    - cron: '0 0 20-31 5,8,11 *'  # 00:00 UTC (09:00 KST)
    - cron: '0 1 20-31 5,8,11 *'  # 01:00 UTC (10:00 KST)
    - cron: '0 2 20-31 5,8,11 *'  # 02:00 UTC (11:00 KST)
    - cron: '0 3 20-31 5,8,11 *'  # 03:00 UTC (12:00 KST)
    - cron: '0 4 20-31 5,8,11 *'  # 04:00 UTC (13:00 KST)
    - cron: '0 5 20-31 5,8,11 *'  # 05:00 UTC (14:00 KST)
    - cron: '0 6 20-31 5,8,11 *'  # 06:00 UTC (15:00 KST)
    - cron: '0 7 20-31 5,8,11 *'  # 07:00 UTC (16:00 KST)
    - cron: '0 8 20-31 5,8,11 *'  # 08:00 UTC (17:00 KST)
    - cron: '0 9 20-31 5,8,11 *'  # 09:00 UTC (18:00 KST)

permissions:
  contents: write  # 릴리즈 생성 및 태그 푸시 권한

env:
  TZ: 'Asia/Seoul' # 전체 워크플로우에 한국 시간대 적용
  PYTHON_VERSION: '3.9'
  PYTHON_SCRIPT_ZIP_FILENAME_BASE: "저축은행_데이터"
  # Python 스크립트가 사용할 기본 출력 디렉토리 (루트 기준)
  # 스크립트는 이 디렉토리 내에 "저축은행_데이터_YYYYMMDD" 형태의 하위 폴더를 생성하고,
  # ZIP 파일은 이 디렉토리 바로 아래에 생성합니다. (예: output/저축은행_데이터_YYYYMMDD.zip)
  OUTPUT_BASE_DIR_NAME: "output"

jobs:
  check-and-scrape:
    runs-on: ubuntu-latest

    steps:
    # 1. 코드 체크아웃
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    # 2. Python 환경 설정
    - name: Python ${{ env.PYTHON_VERSION }} 설정
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # 3. 동적 환경 변수 준비 (날짜, 파일명 등)
    - name: 동적 환경 변수 준비
      id: prep_vars
      run: |
        echo "TODAY_YMD=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
        echo "DATETIME_TAG_PART=$(date +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT
        echo "DATETIME_KST_FULL=$(date '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_OUTPUT
        echo "EXPECTED_ZIP_FILENAME=${{ env.PYTHON_SCRIPT_ZIP_FILENAME_BASE }}_$(date +%Y%m%d).zip" >> $GITHUB_OUTPUT
        echo "EXPECTED_SUMMARY_FILENAME=스크래핑_요약_$(date +%Y%m%d).xlsx" >> $GITHUB_OUTPUT
        echo "EXPECTED_LOG_FILENAME=scraping_log_$(date +%Y%m%d).log" >> $GITHUB_OUTPUT
        echo "DYNAMIC_OUTPUT_SUBDIR_NAME=${{ env.PYTHON_SCRIPT_ZIP_FILENAME_BASE }}_$(date +%Y%m%d)" >> $GITHUB_OUTPUT

    # 4. 마지막 평일 및 실행 시간 확인 (Python 스크립트 사용)
    - name: 마지막 평일 및 실행 시간 확인
      id: check_date # 스텝 ID 변경 (하이픈 권장)
      run: |
        python_code=$(cat <<EOF
        import datetime
        import calendar
        import sys
        import os

        now_kst = datetime.datetime.now() # TZ 환경변수로 인해 KST로 동작
        year = now_kst.year
        month = now_kst.month
        day = now_kst.day
        hour_kst = now_kst.hour

        should_run_final = "false"

        # 실행 월 및 마지막 평일, 시간대 확인 로직 (기존과 동일)
        if month not in [5, 8, 11]:
            print(f"대상 월({month}월)이 아닙니다.")
        else:
            last_day_of_month_num = calendar.monthrange(year, month)[1]
            actual_last_weekday_day_num = -1
            for d_loop_num in range(last_day_of_month_num, 0, -1):
                date_to_check_loop = datetime.date(year, month, d_loop_num)
                if date_to_check_loop.weekday() < 5: # 월(0) ~ 금(4)
                    actual_last_weekday_day_num = d_loop_num
                    break
            
            if day != actual_last_weekday_day_num:
                print(f"오늘({year}-{month}-{day})은 마지막 평일(해당 월 {actual_last_weekday_day_num}일)이 아닙니다.")
            else:
                if not (9 <= hour_kst <= 18): # KST 9시 ~ 18시
                    print(f"현재 시간({hour_kst}시 KST)이 대상 실행 시간대(09시-18시)가 아닙니다.")
                else:
                    print(f"실행 조건 충족: 마지막 평일({year}-{month}-{day})이며, 실행 시간대({hour_kst}시 KST)입니다.")
                    should_run_final = "true"
        
        github_output_file = os.getenv('GITHUB_OUTPUT')
        if github_output_file:
            with open(github_output_file, 'a') as f:
                f.write(f"should_run={should_run_final}\n")
            print(f"Set GITHUB_OUTPUT: should_run={should_run_final}")
        else:
            print(f"Warning: GITHUB_OUTPUT not set. Would have set: should_run={should_run_final}")
        EOF
        )
        python -c "$python_code"

    # 5. Chrome 및 ChromeDriver 설치
    - name: Chrome 및 ChromeDriver 설치
      if: steps.check_date.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable # 안정적인 최신 버전 사용

    # 6. 의존성 설치
    - name: 의존성 설치
      if: steps.check_date.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        python -m pip install --upgrade pip
        # NumPy 및 requirements.txt 설치 (기존 방식 유지)
        pip install --no-cache-dir --force-reinstall numpy==1.24.4 
        pip install --no-cache-dir --force-reinstall -r requirements.txt

    # 7. 스크래핑 실행
    - name: 스크래핑 실행
      id: run_scraper # 스텝 ID 추가 (결과 확인용)
      if: steps.check_date.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
      run: python bank_scraper_headless.py
      env:
        OUTPUT_DIR: "./${{ env.OUTPUT_BASE_DIR_NAME }}" # Python 스크립트에 출력 기본 디렉토리 전달
        MAX_WORKERS: 2
        MAX_RETRIES: 2
        PAGE_LOAD_TIMEOUT: 25
        WAIT_TIMEOUT: 15
        GMAIL_ADDRESS: ${{ secrets.GMAIL_ADDRESS }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        RECIPIENT_EMAILS: ${{ secrets.RECIPIENT_EMAILS }}

    # 8. 결과 파일 업로드
    - name: 결과 파일 업로드
      if: always() # 성공/실패 관계없이 항상 실행 (로그 확인용)
      uses: actions/upload-artifact@v4
      with:
        name: 저축은행-데이터-${{ steps.prep_vars.outputs.DATETIME_TAG_PART }}-${{ github.run_number }}
        path: |
          ${{ env.OUTPUT_BASE_DIR_NAME }}/ # output 폴더 전체 업로드
          # Python 스크립트는 ZIP 파일을 OUTPUT_BASE_DIR_NAME 내부에 생성합니다.
          # 예: output/저축은행_데이터_YYYYMMDD.zip
          # 따라서 위 output/ 만으로도 ZIP 파일이 포함됩니다.
          # 만약 ZIP 파일이 루트에 있다면 아래 주석 해제:
          # ${{ steps.prep_vars.outputs.EXPECTED_ZIP_FILENAME }}
        retention-days: 7 # 실패 시 디버깅을 위해 짧게 설정 가능

    # 9. 릴리즈 생성
    - name: 릴리즈 생성
      if: (steps.check_date.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch') && steps.run_scraper.outcome == 'success'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: data-v${{ steps.prep_vars.outputs.DATETIME_TAG_PART }}-${{ github.run_number }}
        name: "저축은행 데이터 ${{ steps.prep_vars.outputs.DATETIME_TAG_PART }} (빌드 #${{ github.run_number }})"
        body: |
          자동 생성된 저축은행 데이터입니다.
          생성 시간 (KST): ${{ steps.prep_vars.outputs.DATETIME_KST_FULL }}
          데이터는 아래 첨부된 ZIP 파일을 확인하세요.
        files: |
          ${{ env.OUTPUT_BASE_DIR_NAME }}/${{ steps.prep_vars.outputs.EXPECTED_ZIP_FILENAME }}
          ${{ env.OUTPUT_BASE_DIR_NAME }}/${{ steps.prep_vars.outputs.DYNAMIC_OUTPUT_SUBDIR_NAME }}/${{ steps.prep_vars.outputs.EXPECTED_SUMMARY_FILENAME }}
          ${{ env.OUTPUT_BASE_DIR_NAME }}/${{ steps.prep_vars.outputs.DYNAMIC_OUTPUT_SUBDIR_NAME }}/${{ steps.prep_vars.outputs.EXPECTED_LOG_FILENAME }}
        token: ${{ secrets.GITHUB_TOKEN }} # 기본 제공 토큰 사용

    # 10. 실패 알림
    - name: 실패 알림
      if: failure() && (steps.check_date.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch') && steps.run_scraper.outcome == 'failure'
      run: |
        echo "‼️ 스크래핑 작업 실패! 워크플로우 로그 및 업로드된 아티팩트의 로그 파일을 확인하세요."
        # 필요한 경우 여기에 Slack 또는 다른 알림 서비스 연동
